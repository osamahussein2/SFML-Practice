For now, it is much more important to talk about the why of references. There are two reasons to use references, and we have
already mentioned them. Here they are, summarized again:

1. Changing/reading the value of a variable/object in another function, which is otherwise out of scope.

2. Passing/returning to/from a function without making a copy (and, therefore, more efficiently).

Pointers are variables that hold a memory address.

There are two main operators associated with pointers. The first is the address of operator: &
The second is the dereference operator: *

A static function is a function of a class that can be called without an instance of the class.

When we declare variables (including pointers), they are in an area of memory known as the stack. There is another area of
memory which, although allocated and controlled by the operating system, can be allocated at runtime. This other area of
memory is called the free store, or sometimes, the heap.

Memory on the heap does not have scope to a specific function. Returning from a function does not delete the memory on the
heap.

Any allocated memory is returned when the program ends. It is, however, important to realize that this memory will never be
freed (within the execution of our game) unless we free it. If we continue to take memory from the free store without giving
it back, eventually it will run out and the game will crash.

If a pointer points to an address that is invalid, it is called a wild or dangling pointer. If you attempt to dereference a
dangling pointer and if you are lucky, the game will crash, and you will get a memory access violation error. If you are
unlucky, you will create a bug that will be incredibly difficult to find. Furthermore, if we use memory on the free store
that will persist beyond the life of a function, we must make sure to keep a pointer to it or we will have leaked memory.

The Standard Template Library (STL) is a collection of data containers and ways to manipulate the data we put in those
containers. If we want to be more specific, it is a way to store and manipulate different types of C++ variables and classes.

The types of container that are available through the STL include the following:

1. Vector: This is like an array with boosters. It handles dynamic resizing, sorting, and searching. This is probably the most
useful container.

2. List: A container that allows for the ordering of the data.

3. Map: An associative container that allows the user to store data as key/value pairs. This is where one piece of data is the
"key" to finding the other piece. A map can also grow and shrink, as well as be searched.

4. Set: A container that guarantees that every element is unique.

What is a map?
A map is a container that is dynamically resizable. We can add and remove elements with ease. What makes the map class
special compared to the other containers in the STL is the way that we access the data within it. The data in a map instance
is stored in pairs.

The != accounts.end value is used to determine when a key does or doesn't exist. If the searched for key is not present in
the map, then accounts.end will be the result of the if statement.

The following code shows how we could loop through each key-value pair of the account's map and add one to each of the
account numbers:

for (map<string,int>::iterator it = accounts.begin(); it != accounts.end(); ++ it)
{
	it->second += 1;
}

map<string,int>::iterator is a type. We are declaring an iterator that's suitable for a map with key-value pairs of string and
int. The iterator's name is it. We assign the value that's returned by accounts.begin() to it. The iterator, it, now holds the
first key-value pair from the accounts map.

it != accounts.end() means the loop will continue until the end of the map is reached, and ++it simply steps to the next
key-value pair in the map, each pass through the loop.

it->second accesses the value of the key-value pair and += 1 adds one to the value. Note that we can access the key (which is
the first part of the key-value pair) with it->first.

C++ supplies a neat way to reduce verbosity with the auto keyword. Using the auto keyword like so:

for (auto it = accounts.begin(); it != accounts.end(); ++ it)
{
	it->second += 1;
}

The auto keyword instructs the compiler to automatically deduce the type for us.

Coding a class in such a way that there can only ever be one instance of it. This type of class is called a singleton.

A singleton is a design pattern. A design pattern is a way to structure our code that is proven to work.

Q) Are there any better ways of doing collision detection?

A) Yes. There are lots more ways to do collision detection, including but not limited to the following.

• You can divide objects up into multiple rectangles that fit the shape of the sprite better. It is perfectly manageable for
C++ to check on thousands of rectangles each frame. This is especially the case when you use techniques such as neighbor
checking to reduce the number of tests that are necessary each frame.

• For circular objects, you can use the radius overlap method.

• For irregular polygons, you can use the passing number algorithm.

You can review all of these techniques, if you wish, by taking a look at the following links:

• Neighbor checking: http://gamecodeschool.com/essentials/collision-detection-neighbor-checking/
• Radius overlap method: http://gamecodeschool.com/essentials/collision-detection-radius-overlap/
• Crossing number algorithm: http://gamecodeschool.com/essentials/collision-detection-crossing-number/

Shaders are programs written in another language that run directly on the graphics card.

Shaders are programs written in GLSL (Graphics Library Shading Language).

For this project, however, we will learn some more C++ and implement a PlayableCharacter class with all the common
functionality of Thomas and Bob. Then, the Thomas and Bob classes will inherit this common functionality as well as 
implementing their own unique functions and abilities. This technique, perhaps unsurprisingly, is called inheritance.

Inheritance means we can harness all the features and benefits of other people's classes, including the encapsulation, while
further refining or extending the code specifically to our situation.

The class that is extended from is the super-class, and the class that inherits from the super-class is the sub-class. We 
can also say parent and child class.

Polymorphism allows us to write code that is less dependent on the types we are trying to manipulate. This can make our code
clearer and more efficient. Polymorphism means many forms.

An abstract class is a class that cannot be instantiated and therefore cannot be made into an object.

A concrete class is any class that isn't abstract. In other words, all the classes we have written so far have been concrete
classes and can be instantiated into usable objects.

By the way, virtual as opposed to pure virtual is a function that can be optionally overridden. You declare a virtual 
function the same way as a pure virtual function but leave the = 0 off to the end.

Remember that protected variables can be used as if they were public in classes that inherit from the class with the 
protected variables.

Spatialization is the act of making something relative to the space it is a part of, or within.

Being aware of where the sound is coming from in our game world. This source of the sound is called an emitter.

Attenuation is the rate at which a wave deteriorates. You could simplify that statement and make it specific to sound and say
that attenuation is how quickly the sound reduces in volume.

When you have a rate of change (speed) in more than one direction, the combined values also define a direction. This is
called velocity.

Through OpenGL, we have access to what is called a programmable pipeline. We can send our graphics off to be drawn, each
frame, with the RenderWindow instance's draw function.

This extra code that runs on the GPU is called a shader program. We can write code to manipulate the geometry (position) of
our graphics in a vertex shader. We can also write code that manipulates the appearance of every pixel individually in code.
This is known as a fragment shader.

In OpenGL, everything is a point, a line, or a triangle. In addition, we can attach colors and textures to this basic
geometry, and we can also combine these elements to make the complex graphics that we see in today's modern games. These are
collectively known as primitives. We have access to OpenGL primitives through the SFML primitives and VertexArray, as well as
the Sprite and Shape classes.

In addition to primitives, OpenGL uses matrices. Matrices are a method and structure for performing arithmetic. This
arithmetic can range from extremely simple high school-level calculations such as moving (translating) a coordinate or it can
be quite complex, such as performing more advanced mathematics, for example, to convert our game world coordinates into
OpenGL screen coordinates that the GPU can use. Fortunately, it is this complexity that SFML handles for us behind the scenes.
SFML also allows us to handle OpenGL directly.

A design pattern is a reusable solution to a coding problem. In fact, most games (including this one) will use multiple
design patterns. The key point about design patterns is this: they are already proven to provide a good solution to a common
problem. We are not going to invent any design patterns – we are just going to use some that already exist to solve the
problem of our ever-expanding code.

A screen is a logical division of the parts of the game.

When we use composition over inheritance to create a group of classes that represent behavior/algorithms, this is known as
the Strategy pattern.

Smart pointers are classes that we can use to get the same functionality as a regular pointer but with an extra feature – the
feature being that they take care of their own deletion.

The way that a shared pointer can safely delete the memory it points to is by keeping a count of the number of different
references there are to an area of memory. If you pass a pointer to a function, the count is increased by one. If you pack a
pointer into a vector, the count is increased by one. If the function returns, the count is decreased by one. If the vector
goes out of scope or has the clear function called on it, the smart pointer will reduce the reference count by one. When the
reference count is zero, nothing points to the area of memory anymore and the smart pointer class calls delete. All the smart
pointer classes are implemented using regular pointers behind the scenes. We just get the benefit of not having to concern
ourselves about where or when to call delete.

myPointer = make_shared<MyClass>();

The call to make_shared internally calls new to allocate the memory.

By using a shared smart pointer, there is some performance and memory overhead. By overhead, I mean that our code runs slower
and uses more memory. After all, the smart pointer needs a variable to keep track of the reference count, and it must check
the value of the reference count every time a reference goes out of scope.

When we know that we only want a single reference to an area of memory, we can use a unique smart pointer. Unique pointers
lose much of the overhead that I mentioned shared pointers have. In addition, if you try and make a copy of a unique pointer,
the compiler will warn us, and the code will either not compile or it will crash, giving us a clear error. This is a very
useful feature that can prevent us from accidentally copying a pointer that was not meant to be copied.

The exact same rules apply when passing a unique pointer to a function; use the move function to pass responsibility on.

We have a unique pointer of the ScreenManager Type. This implies that this pointer will not be passed to any other classes
but, if it is, then ownership will also be passed.